Caso voce tenha adicionado os arquivos com git add e depois
dado commit mas percebeu que nao fez corretamente voce
pode usar esse comandos:

Você pode voltar o commit e manter as alterações no seu 
diretório de trabalho (útil se quiser revisar):
- git reset --soft HEAD~1

Para remover os arquivos da área de staging (git add):
git restore --staged srcs/

📁 Estrutura Inicial
Title: Criar Estrutura de Diretórios do Projeto
Description:

markdown
Copy
Edit
- Criar a seguinte árvore de diretórios:
  - /srcs/
  - /srcs/requirements/
    - mariadb/
    - nginx/
    - wordpress/
    - tools/
    - bonus/
- Criar `Makefile` na raiz.
- Criar `docker-compose.yml` dentro de `srcs/`.
- Criar arquivo `.env` dentro de `srcs/`.
- Atualizar `.gitignore` para ignorar `.env`.

🐳 Docker Compose
Title: Configurar Docker Compose (Redes e Volumes)
Description:
- Definir uma network customizada no docker-compose.yml.
- Criar volume para persistência dos dados do MariaDB.
- Criar volume para persistência dos arquivos do WordPress.
- Garantir que containers usam apenas a network especificada.
- Definir políticas de restart: always.

🛢️ Serviço MariaDB
Title: Implementar Serviço MariaDB

O Maria db e um sistema de gerenciamento de banco de dados relacional ()

Description:
- Criar Dockerfile para MariaDB baseado em Alpine ou Debian.
- Instalar MariaDB Server.
- Configurar usuário administrador e usuário normal.
- Nenhum dos usernames deve conter "admin" ou variações.
- Usar scripts de inicialização para criação do banco.
- Garantir que o processo rode como PID 1 (sem tail -f, sleep, etc).
- Utilizar variáveis de ambiente para configurações sensíveis.

✅ Explicação completa do porquê do MariaDB neste projeto:
📌 O que é o MariaDB?
MariaDB é um sistema de gerenciamento de banco de dados relacional, open-source e compatível com MySQL. Ele serve como backend para aplicações como o WordPress armazenarem dados de forma estruturada e persistente.

🎯 Por que estamos usando MariaDB nesse projeto Inception?
Porque o WordPress — a aplicação principal deste projeto — precisa de um banco de dados para:

Armazenar usuários.
Postagens, comentários, páginas.
Metadados (como configurações de plugins, temas etc).

➡️ O MariaDB entra como o coração de persistência do WordPress, mantendo tudo que não é arquivo.
🧠 O que você deve entender tecnicamente:
Conceito	                      Explicação
Container isolado	              O MariaDB roda isolado, em um container dedicado, separado do WordPress.
Comunicação via rede docker	    Os containers falam entre si por uma docker network (no caso, inception).
Volume	                        Os dados da base ficam persistidos fora do container (ex: /home/login/data/mariadb).
Variáveis de ambiente (.env)	  São usadas para passar user, password, db name etc., sem expor no Dockerfile.
Scripts de inicialização	      São arquivos .sh ou .sql que criam usuários, banco etc., na primeira vez.
Usuário administrador         	Deve ser criado com nome que não contenha "admin" ou "administrator", conforme exigência.
Segurança	                      Sem senhas hardcoded. Nada de usar root sem necessidade.

✅ 1. Checklist de Validação da Task "Implementar Serviço MariaDB"

📋 **Checklist Técnico e Funcional**

### 🔧 Estrutura e Configuração
- Existe um diretório `requirements/mariadb` com:
  - `Dockerfile`
  - `conf/my.cnf`
  - `tools/dbscript.sh`
- Existe um `.env` na pasta `srcs/` com as seguintes variáveis:
  - `MYSQL_ROOT_PASSWORD`
  - `MYSQL_USER`
  - `MYSQL_PASSWORD`
  - `MYSQL_DATABASE` (opcional, mas recomendado)

### 🐳 Dockerfile
- A imagem base é Alpine ou Debian.
- Instala `mariadb-server` corretamente.
- Copia `my.cnf` para o local correto.
- Copia e executa `dbscript.sh`.
- Expõe a porta `3306`.
- Usa `ENTRYPOINT` com `exec` e sem hacks como `tail -f` ou `sleep`.

### 🔒 Segurança e Conformidade
- Não há senha hardcoded nos arquivos `.sh` ou `Dockerfile`.
- Senhas e configurações sensíveis estão no `.env`.
- Nenhum nome de usuário inclui “admin” ou variações proibidas.
- O processo principal roda como PID 1 com `exec`.

### 📦 Docker Compose (opcional para este passo, mas recomendável)
- O `docker-compose.yml` está pronto ou com o serviço `mariadb` corretamente configurado para testes.
- Volume para persistência de dados está definido (`/var/lib/mysql`).
- O container usa a rede `inception` e o nome `mariadb`.

🧪 2. Como Testar se Está Tudo Certo
🔌 **Passos para Testar MariaDB em Container**

▶️ Executar o Build (caso ainda não tenha `docker-compose`)
cd srcs
docker build -t mariadb_test ./requirements/mariadb
docker run --rm -it --env-file .env mariadb_test

Isso serve para testar se o container inicializa corretamente e o banco é criado.

▶️ Se já estiver com docker-compose.yml, use:
docker-compose up --build mariadb

💻 Conecte-se ao banco dentro do container:
docker exec -it mariadb mariadb -u $MYSQL_USER -p
# Digite a senha definida em .env (MYSQL_PASSWORD)

🧾 Execute os comandos SQL para verificar:
SHOW DATABASES;
-- Deve mostrar "WordPress"

SHOW GRANTS FOR 'rog_dev'@'%';
-- Deve mostrar os privilégios do usuário

🔐 Teste de acesso via root (se necessário):
docker exec -it mariadb mariadb -u root -p$MYSQL_ROOT_PASSWORD

Criar Dockerfile para MariaDB baseado em Alpine ou Debian. #16
Instalar MariaDB Server. #17
Configurar usuário administrador e usuário normal. #18
Nenhum dos usernames deve conter "admin" ou variações. #19
Usar scripts de inicialização para criação do banco. #20
Garantir que o processo rode como PID 1 (sem tail -f, sleep, etc). #21
Utilizar variáveis de ambiente para configurações sensíveis. #22











🧰 Serviço WordPress + PHP-FPM
Title: Implementar Serviço WordPress + PHP-FPM
Description:
- Criar Dockerfile baseado em Alpine ou Debian.
- Instalar php, php-fpm e extensões necessárias (php-mysql, etc).
- Instalar WordPress manualmente na imagem.
- Configurar php-fpm corretamente para servir o WordPress.
- WordPress deve apontar para o container MariaDB.
- Utilizar variáveis de ambiente para configuração de acesso ao banco.
- Persistir os arquivos de WordPress no volume correto.

✅ Explicação completa do porquê do WordPress neste projeto:

📌 O que é o WordPress?
O WordPress é um CMS (Content Management System) amplamente utilizado para criação de sites e blogs. Ele é escrito em PHP e utiliza um banco de dados (como MariaDB) para armazenar seus conteúdos dinâmicos, como posts, usuários, páginas e configurações.

🎯 Por que estamos usando o WordPress neste projeto Inception?
Porque é o principal serviço da stack: o objetivo final do projeto é entregar um ambiente onde o WordPress esteja funcionando com segurança, performance e isolamento em containers.

➡️ O WordPress é a aplicação principal, que depende do MariaDB (para persistência de dados) e do NGINX + PHP-FPM (para servir conteúdo via web).

🧠 O que você deve entender tecnicamente:

| Conceito                      | Explicação                                                                                     |
|------------------------------|------------------------------------------------------------------------------------------------|
| Container isolado            | O WordPress roda em seu próprio container, separado do NGINX e do MariaDB.                    |
| PHP-FPM                      | O WordPress não tem servidor embutido. Ele é processado pelo PHP-FPM, que serve o conteúdo PHP.|
| Comunicação com MariaDB      | O WordPress se conecta ao banco através de variáveis de ambiente (host, user, password, etc.). |
| Instalação manual            | O WordPress é baixado manualmente no Dockerfile e instalado diretamente na imagem.             |
| Configuração por volume      | Os arquivos do WordPress são persistidos em volume (`/var/www/html`) para garantir persistência.|
| Variáveis de ambiente        | Definidas no `.env`, são usadas para configurar o acesso ao banco e inicializar a aplicação.   |
| Arquivo `wp-config.php`      | Esse arquivo de configuração deve ser ajustado dinamicamente para consumir as variáveis do `.env`. |

---

✅ 1. Checklist de Validação da Task "Implementar Serviço WordPress"

📋 **Checklist Técnico e Funcional**

### 🔧 Estrutura e Configuração
- Existe um diretório `requirements/wordpress` com:
  - `Dockerfile`
  - Script de configuração (como `setup.sh`, se necessário)
  - Diretório `wordpress/` com arquivos persistidos

### 🐳 Dockerfile
- Baseado em Alpine ou Debian (Debian geralmente para melhor compatibilidade com PHP).
- Instala pacotes obrigatórios:
  - `php`, `php-fpm`, `php-mysqli`, `php-exif`, `php-gd`, `php-curl`, `php-xml`, `php-mbstring` etc.
- Faz download e extração do WordPress (versão estável).
- Copia ou gera um `wp-config.php` com uso de variáveis de ambiente.
- Expõe a porta `9000` (PHP-FPM).
- Usa `ENTRYPOINT` com `exec php-fpm7.4 -F` (ou equivalente), sem `tail -f` ou `sleep`.

### 🔌 Integração com MariaDB
- Conexão ao banco deve usar variáveis como `MYSQL_HOST`, `MYSQL_USER`, `MYSQL_PASSWORD`, `MYSQL_DATABASE`.
- O container deve esperar pelo banco antes de tentar se conectar (use `wait-for-it.sh` se necessário).

### 💾 Persistência
- O volume `/var/www/html` está montado para armazenar os arquivos do WordPress.
- Os dados não devem ser apagados em rebuild do container.

### 📦 Docker Compose
- O serviço `wordpress` está definido no `docker-compose.yml`.
- Conecta-se à rede `inception`.
- Depende dos containers `nginx` e `mariadb`.

---

🧩 Subtasks Relacionadas:

| Subtask                                                                                 | Status |
|------------------------------------------------------------------------------------------|--------|
| Criar Dockerfile baseado em Alpine ou Debian.                                            | 🔧     |
| Instalar PHP, PHP-FPM e extensões necessárias (php-mysqli, php-curl, etc).              | 🔧     |
| Instalar WordPress manualmente na imagem.                                                | 🔧     |
| Configurar PHP-FPM corretamente para servir o WordPress.                                | 🔧     |
| WordPress deve apontar para o container MariaDB via variáveis do `.env`.                | 🔧     |
| Utilizar variáveis de ambiente para configuração de acesso ao banco no `wp-config.php`. | 🔧     |
| Persistir os arquivos do WordPress no volume correto (`/var/www/html`).                 | 🔧     |

---

Se quiser, posso te ajudar a transformar cada bloco desses em issues automaticamente com um script usando a GitHub API, ou gerar um template .md para importar direto. Deseja isso?











🌐 Serviço NGINX
Title: Implementar Serviço NGINX com HTTPS (TLSv1.2 ou TLSv1.3)
Description:
- Criar Dockerfile para Nginx baseado em Alpine ou Debian.
- Instalar e configurar o Nginx.
- Criar certificados SSL/TLS self-signed.
- Configurar Nginx para escutar apenas na porta 443 com HTTPS.
- Permitir apenas TLSv1.2 ou TLSv1.3 no server.
- Redirecionar requisições para o PHP-FPM de WordPress (FastCGI).
- Utilizar variáveis de ambiente para certs paths.

✅ Explicação completa do porquê do NGINX neste projeto:

📌 O que é o NGINX?
NGINX é um servidor web de alto desempenho, open-source, usado amplamente para servir sites estáticos, fazer proxy reverso, balanceamento de carga, entre outros. Ele é leve, eficiente e altamente configurável — ideal para ambientes com recursos limitados como containers Docker.

🎯 Por que estamos usando o NGINX nesse projeto Inception?
Porque o WordPress, apesar de ser uma aplicação PHP, não expõe suas páginas diretamente. Ele precisa de um servidor web que:

- Sirva as páginas HTML geradas.
- Redirecione as requisições dinâmicas `.php` para o interpretador PHP-FPM.
- Implemente HTTPS com certificados SSL.
- Garanta performance e segurança na entrega dos conteúdos.

➡️ O NGINX atua como **gateway HTTP seguro**:
- Recebe todas as requisições.
- Garante que **tudo seja servido por HTTPS** (sem porta 80).
- Redireciona as requisições `.php` para o container do WordPress/PHP-FPM.
- Gerencia certificados e segurança TLS.

🧠 O que você deve entender tecnicamente:
| Conceito                        | Explicação                                                                 |
|--------------------------------|----------------------------------------------------------------------------|
| Container isolado              | O NGINX roda em seu próprio container, separado do WordPress e do MariaDB.|
| Comunicação via rede Docker    | Ele se comunica com o WordPress através da mesma rede Docker (`inception`).|
| Certificados self-signed       | Em ambiente de desenvolvimento, usamos certificados SSL autoassinados.     |
| HTTPS na porta 443             | Nenhum acesso via HTTP. Somente conexões HTTPS serão permitidas.           |
| TLSv1.2/TLSv1.3                | Somente protocolos seguros serão aceitos.                                 |
| Redirecionamento para PHP-FPM  | O NGINX age como proxy reverso para o WordPress interpretado via PHP-FPM. |
| Variáveis de ambiente (.env)   | Os caminhos dos certificados serão configurados por variáveis no `.env`.  |

---

✅ 1. Checklist de Validação da Task "Implementar Serviço NGINX"

📋 **Checklist Técnico e Funcional**

### 🔧 Estrutura e Configuração
- Existe um diretório `requirements/nginx` com:
  - `Dockerfile`
  - `conf/nginx.conf`
  - `tools/generate_cert.sh`
  - `tools/entrypoint.sh`
- Existe um `.env` na pasta `srcs/` com variáveis:
  - `CERT_PATH`
  - `KEY_PATH`

### 🐳 Dockerfile
- A imagem base é Alpine ou Debian.
- Instala `nginx` corretamente.
- Copia o `nginx.conf` para o diretório apropriado (`/etc/nginx`).
- Copia e executa `generate_cert.sh` para gerar certs self-signed.
- Expõe a porta `443`.
- Usa `ENTRYPOINT` com `exec` e sem hacks como `tail -f`, `sleep`, etc.

### 🔒 Segurança e HTTPS
- `nginx.conf` está configurado para escutar **apenas** na porta 443.
- Protocolos antigos (TLS 1.0/1.1) estão desativados.
- Apenas TLSv1.2 e TLSv1.3 estão habilitados.
- Redirecionamento de requisições `.php` para `fastcgi_pass wordpress:9000;` está funcionando.
- Caminhos dos certificados são definidos via variáveis de ambiente no `.env`.

### 📦 Docker Compose (opcional para este passo, mas recomendável)
- O `docker-compose.yml` define o serviço `nginx` corretamente:
  - Monta volume com os certificados.
  - Liga à rede `inception`.
  - Define `depends_on: wordpress`.

🧪 2. Como Testar se Está Tudo Certo
🔌 **Passos para Testar NGINX em Container**

▶️ Executar o Build (caso ainda não tenha `docker-compose`)
```bash
cd srcs
docker build -t nginx_test ./requirements/nginx
docker run --rm -it --env-file .env -p 443:443 nginx_test
```

▶️ Testar com cURL ou navegador:
curl -k https://localhost
# Deve retornar o conteúdo servido via NGINX (ex: página inicial do WordPress)

▶️ Verificar SSL/TLS:
openssl s_client -connect localhost:443
# Verificar que apenas TLSv1.2 e TLSv1.3 são permitidos


▶️ Se usar docker-compose:
docker-compose up --build nginx

🧾 Validar FastCGI e redirecionamento:
- Acessar https://localhost deve carregar a página inicial do WordPress.
- No nginx.conf, as requisições .php devem ser redirecionadas via fastcgi_pass wordpress:9000.

📌 Subtasks associadas:
🧩 Subtask: Criar Dockerfile para NGINX baseado em Alpine ou Debian #25
🧩 Subtask: Instalar e Configurar o NGINX #26
🧩 Subtask: Criar Certificados SSL/TLS Self-Signed #27
🧩 Subtask: Configurar NGINX para escutar apenas na porta 443 com HTTPS #28
🧩 Subtask: Permitir apenas TLSv1.2 ou TLSv1.3 no server #29
🧩 Subtask: Redirecionar requisições para o PHP-FPM de WordPress (FastCGI) #30
🧩 Subtask: Utilizar variáveis de ambiente para certs paths #31






🔒 Segurança Geral
Title: Implementar Segurança: Portas, Restart e Variables
Description:
- Garantir que só o Nginx expõe portas (443).
- Definir política de restart: always nos serviços.
- Nenhuma senha/usuário no código, usar somente variáveis de ambiente.
- Armazenar todas as credenciais no `.env`.
- Adicionar `.env` ao `.gitignore`.


⚙️ Makefile
Title: Criar Makefile para Automatizar o Build/Up/Down
Description:
- Implementar Makefile com targets:
  - make → docker-compose up --build -d
  - make down → docker-compose down
  - make fclean → docker system prune -af
- O Makefile deve estar na raiz do projeto.
- Usar variáveis e organização clara no Makefile.

🧪 Testes Finais
Title: Testar e Validar a Stack Completa
Description:
- Testar se o domínio login.42.fr acessa corretamente via HTTPS.
- Verificar se o WordPress conecta ao MariaDB corretamente.
- Testar persistência de dados em volumes após reiniciar containers.
- Garantir que containers reiniciam automaticamente após crash.
- Validar TLSv1.2/1.3 no navegador.



---


# Inception - 42sp

## ✅ Objetivo Geral do Projeto

Criar uma infraestrutura baseada em Docker Compose com múltiplos serviços, cada um em seu próprio container, simulando uma aplicação em produção com segurança (TLS), banco de dados e CMS (WordPress).

---

## 🧠 Conceitos Fundamentais

| Conceito                | Justificativa                                                                 |
|-------------------------|-------------------------------------------------------------------------------|
| Docker/Dockerfile       | Imagens customizadas, sem usar imagens prontas de serviços.                   |
| docker-compose          | Orquestra múltiplos containers de forma integrada e reprodutível.             |
| Volumes                 | Persistência de dados (banco e arquivos do site).                             |
| Rede customizada        | Comunicação segura e isolada entre containers.                                |
| TLS/SSL (v1.2/v1.3)     | Segurança da aplicação via NGINX.                                             |
| Ambiente isolado (VM)   | Projeto autossuficiente e reprodutível.                                       |
| Variáveis de Ambiente   | Segurança e organização das configurações sensíveis (.env).                   |
| Makefile                | Automatização do build e gerenciamento dos serviços.                          |

---

## 🔎 Regras Obrigatórias

### 1. Diretório `srcs/`
Todos os arquivos de configuração, Dockerfiles, scripts, etc., devem ficar aqui para garantir organização.

### 2. Makefile na raiz
Automatiza o build e gerenciamento dos containers.
- Exemplo: `docker compose up --build`
- Pode conter comandos como `docker compose down -v` para limpar volumes.

### 3. Containers obrigatórios

| Serviço                | Requisitos                                                                 |
|------------------------|----------------------------------------------------------------------------|
| NGINX                  | Único ponto de entrada (porta 443), apenas TLSv1.2/1.3.                    |
| WordPress + php-fpm    | CMS rodando em FastCGI, sem nginx.                                         |
| MariaDB                | Banco de dados compatível com MySQL.                                       |

Obs: Cada container deve ser isolado.

### 4. Volumes

- Volume 1: Dados do MariaDB
- Volume 2: Arquivos do WordPress

**Motivo:** Persistência dos dados após reinício dos containers.

### 5. Rede customizada

Definida no `docker-compose.yml`. Não usar recursos legados como `--link` ou `network: host`.

### 6. `.env` com variáveis

Armazena credenciais e configurações sensíveis.
- Deve ser ignorado pelo `.gitignore`.

### 7. Proibições

| Regra                                         | Motivo                                                      |
|-----------------------------------------------|-------------------------------------------------------------|
| Não usar latest                              | Imagens devem ser versionadas para garantir reprodutibilidade. |
| Não usar comandos infinitos (`tail -f`, etc.) | Containers devem rodar processos legítimos no PID 1.         |
| Não expor senhas em Dockerfiles/scripts       | Segurança — usar ENV.                                       |
| Não usar imagens prontas                     | O projeto exige imagens a partir do Alpine ou Debian.        |

### 8. Domínio

Configurar domínio `seulogin.42.fr` apontando para o IP local da VM.

### 9. WordPress com 2 usuários

- Um usuário admin (sem usar "admin", "administrator", etc).
- Um usuário comum.

---

## 📁 Estrutura Esperada

```
.
├── Makefile
└── srcs
    ├── .env
    ├── docker-compose.yml
    ├── requirements
    │   ├── nginx/
    │   ├── wordpress/
    │   ├── mariadb/
    │   └── bonus/
    └── tools/
```

---

## 🧭 Plano de Ação — Passo a Passo

1. **Preparação do Ambiente**
   - Criar VM Linux
   - Instalar Docker e Docker Compose

2. **Estrutura de diretórios**
   - Criar `srcs/requirements/{nginx,wordpress,mariadb}`

3. **Criar `.env`**
   ```env
   DOMAIN_NAME=seulogin.42.fr
   MYSQL_ROOT_PASSWORD=xxxx
   MYSQL_USER=xxxx
   MYSQL_PASSWORD=xxxx
   WP_ADMIN_USER=xxxx
   WP_ADMIN_PASS=xxxx
   ```

4. **Criar Dockerfiles**
   - `mariadb/Dockerfile`: instala MariaDB (Alpine/Debian)
   - `wordpress/Dockerfile`: instala php-fpm + WordPress
   - `nginx/Dockerfile`: instala NGINX e gera certificados TLS

5. **Criar `docker-compose.yml`**
   - Usar `build:` para cada serviço
   - Montar volumes
   - Configurar rede customizada
   - Definir `restart: always`
   - Expor apenas a porta 443 no NGINX
   - Usar `depends_on` conforme necessário

6. **Automatizar com Makefile**
   ```makefile
   all:
       docker compose -f srcs/docker-compose.yml --env-file srcs/.env up --build

   down:
       docker compose -f srcs/docker-compose.yml down

   fclean:
       docker system prune -af
   ```

7. **Gerar certificados TLS**
   - Usar `openssl` para criar `.key` e `.crt` em `tools/nginx`
   - Montar volume para o NGINX acessar os certificados

8. **Configurar `/etc/hosts`**
   ```
   127.0.0.1    seu_login.42.fr
   ```

---

## ⚙️ Makefile

- Implementar Makefile com targets:
  - `make` → `docker-compose up --build -d`
  - `make down` → `docker-compose down`
  - `make fclean` → `docker system prune -af`
- O Makefile deve estar na raiz do projeto.
- Usar variáveis e organização clara no Makefile.

---

## 🧪 Testes Finais

- Testar se o domínio `login.42.fr` acessa corretamente via HTTPS.
- Verificar se o WordPress conecta ao MariaDB corretamente.
- Testar persistência de dados em volumes após reiniciar containers.
- Garantir que containers reiniciam automaticamente após crash.
- Validar TLSv1.2/1.3 no navegador.

---

## 📚 Fontes de Estudo

- [Docker Compose](https://docs.docker.com/compose/)
- [Dockerfile Best Practices](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/)
- [WordPress + MariaDB via Docker](https://developer.wordpress.org)
- [TLS via OpenSSL](https://wiki.openssl.org/index.php/Command_Line_Utilities)
- [PID 1 & ENTRYPOINT](https://0pointer.de/blog/projects/container.html)
- [Como criar Makefile](https://opensource.com/article/19/8/what-how-makefile)

---

## 📝 Resumo (TL;DR)

O projeto Inception consiste em montar uma infraestrutura com 3 containers: NGINX + TLS, WordPress + php-fpm e MariaDB, cada um com sua própria imagem baseada em Alpine ou Debian.  
Os dados devem ser persistidos em volumes.  
As credenciais ficam no `.env` (ignorado pelo Git).  
A comunicação entre containers é feita por uma rede Docker customizada.  
A entrada é exclusivamente pelo NGINX na porta 443, com TLSv1.2 ou 1.3.  
Não pode usar loops infinitos nos containers.  
O Makefile deve construir toda a stack.

---